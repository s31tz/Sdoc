%Document:
  title="Sdoc Handbuch"
  author="Frank Seitz, L{http://fseitz.de/}"
  date="today"
  indentMode=1

%TableOfContents:
  maxLevel=4

---PageBreak---

= Einleitung

Dieses Dokument beschreibt die Syntax und den Gebrauch der Sprache
Sdoc. Sdoc ist eine leichtgewichtige Auszeichnungssprache zum
Verfassen von Dokumenten. Ein Dokument, das in Sdoc geschrieben wurde,
kann portabel in eine Online-Fassung (HTML) und in eine Druck-Fassung
(PDF) übersetzt werden.

Die Online-Fassung ist für die Wiedergabe in einem Browser gedacht.
Ihr Aussehen kann via CSS gestaltet werden.

Die Druck-Fassung wird von LaTeX gesetzt und besitzt eine entsprechend
hohe Qualität für die Wiedergabe auf Papier. In einem PDF-Viewer kann
die Druck-Fassung auch interaktiv genutzt werden, da sie mit
Hyperlinks versehen ist.

Dieses Dokument ist selbst in Sdoc geschrieben. Wie es übersetzt,
angezeigt und verarbeitet wird, ist in Abschnitt L{+Dieses Dokument
übersetzen} beschrieben.

---PageBreak---

= Beispiel

== Sdoc Quelltext

%Code:
  load="+/sdoc-example.sdoc"
  filter="grep -avi geometry"
  ln=1
  indent=0

---PageBreak---

== PDF

  $ sdoc pdf sdoc-example.sdoc

%Graphic:
  file="+/sdoc-example"
  latexOptions="width=0.965\textwidth"
  scale=0.55
  border=1
  padding=2mm
  indent=0

---PageBreak---

== HTML

  $ sdoc html sdoc-example.sdoc

%Graphic:
  file="+/sdoc-example-html"
  latexOptions="width=0.965\textwidth"
  scale=0.55
  border=1
  padding=2mm
  indent=0

---PageBreak---

= Syntax

== Allgemeines

=== Kommentare

In den Quelltext des Dokuments können Kommentarzeilen eingebettet
werden. Diese werden nicht mit gesetzt. Eine Kommentarzeile beginnt
mit einem (#) am I{Zeilenanfang}. Eine Einrückung ist nicht erlaubt.

  # Dies ist ein Kommentar, der nicht im Zieldokument erscheint

Daneben gibt es eine zweite Art von Kommentarzeile, die I{als
Kommentar} in das Zieldokument übertragen wird (sofern das Zielformat
Kommentare unterstützt). Diese Art von Kommentarzeile beginnt mit
Prozent + Leerzeichen (% ) am Zeilenanfang.

  % Dies ist ein Kommentar, der im Quelltext des Zieldokuments erscheint

Weitere Information zu Kommentaren siehe Abschnitt L{+Kommentar}.

%Link:
  name="Kommentar"
  regex="Syntax/Kommentar"

=== Zeilenfortsetzungen

Ist das letzte Zeichen einer Zeile ein Backslash (\), wird die nächste
Zeile als eine Fortsetzung dieser Zeile angesehen und mit dieser
zusammengefasst.

  Hier ist ein URL, der sich in der Quelle über zwei
  Zeilen erstreckt: https://de.wikipedia.org/\\
  wiki/Auszeichnungssprache

produziert:

  Hier ist ein URL, der sich in der Quelle über zwei
  Zeilen erstreckt: https://de.wikipedia.org/\
  wiki/Auszeichnungssprache

Leerraum am Anfang der Folgezeile wird entfernt. Soll Leerraum
zwischen Zeile und Fortsetzungszeile erhalten bleiben, muss dieser I{vor}
dem Backslash stehen.

Eine Zeilenfortsetzung kann unterdrückt werden, indem der Backslash am
Ende der Zeile durch einen vorangestellten Backslash maskiert wird.
Der maskierende Backslash wird automatisch entfernt.

=== Leerzeilen

Leerzeilen können zur besseren optischen Gliederung zwischen
aufeinanderfolgenden Elementen eingestreut werden, sind aber
optional. Es macht keinen Unterschied, ob zum Beispiel zwischen einem
Abschnittstitel und dem darauf folgenden Paragraphen eine Leerzeile
steht oder nicht. Dasselbe gilt für alle anderen Kombinationen von
Elementen. Einzige Ausnahme: Zwischen Paragraphen ist eine Leerzeile
notwendig, um sie voneinander abzugrenzen.

=== Pfad-Expansion

Wird im Sdoc-Quelltext auf eine lokale Datei Bezug genommen
und beginnt ihr Pfad mit C{+/}, wird das Pluszeichen zum
Verzeichnis der Dokumentdatei expandiert.

=== Block-Syntax und Wiki-Syntax

Der Quelltext eines Sdoc-Dokuments kann als eine Abfolge von
I{Blöcken} angesehen werden. Einige dieser Blöcke können I{Segmente}
enthalten.

Die allgemeine Schreibweise für einen Block ist

  %TYPE: KEY=VAL ...
  TEXT
  .

Hierbei ist C{TYPE} der Block-Typ, C{KEY=VAL ...} eine Liste von
Block-Eigenschaften und C{TEXT} ist der Block-Text (der, je nach
Block-Typ auch fehlen kann). Der Block-Text kann Segmente
enthalten. I{Jedes} der Strukturelemente eines Sdoc-Dokuments kann in
Block-Syntax notiert werden.

Daneben definiert Sdoc für I{einige} - nicht alle - Block-Typen eine
kompaktere Wiki-Syntax. Ein Abschnitt (Section) kann beispielsweise in
Wiki-Syntax als

  == Dies ist ein Abschnitt der Ebene 2

oder in Block-Syntax als

  %Section:
    level=2
    title="Dies ist ein Abschnitt der Ebene 2"

notiert werden. Die Wiki-Syntax ist Q{Syntaktischer Zucker}, um das
Dokument kompakter und lesbarer zu halten. In Abschnitt L{+Beispiel in
Block-Syntax} ist das Beispiel aus Abschnitt L{+Beispiel/Sdoc}
vollständig in Block-Syntax wiedergegeben.

---PageBreak---

== Dokument (Document)

Information über das Dokument wird in einem - optionalen -
Dokument-Bock angegeben:

  %Document:
    anchor=STRING
    author=STRING
    codeStyle=STYLE
    copyComments=BOOL
    cssClassPrefix=NAME
    date=STRING
    htmlDocumentStyle=NAME
    htmlIndentation=INTEGER
    indentMode=BOOL
    language=german|english
    latexDocumentClass=scrartcl|scrreprt|scrbook|article|report|book
    latexDocumentOptions=STRING
    latexFontSize=10pt|11pt|12pt
    latexGeometry=STRING
    latexIndentation=FLOAT
    latexPageStyle=TITLEPAGE,OTHERPAGES
    latexPaperSize=PAPERSIZE
    latexParSkip=LENGTH
    latexShowFrames=BOOL
    quiet=BOOL
    sectionNumberLevel=-2|-1|0|1|2|3|4
    smallerMonospacedFont=BOOL
    tableOfContents=BOOL
    title=STRING

Der Dokument-Block kann irgendwo im Dokument stehen. Es ist aus
Gründen der Übersichtlichkeit aber sinnvoll, ihn an den Anfang zu
setzen.

Besitzt mindestens eines der Attribute C{author}, C{date} oder
C{title} einen Wert, wird ein Dokument-Vorspann mit den entsprechenden
Angaben generiert.

Enthält das Dokument keinen Dokument-Block, wird kein
Dokument-Vorspann generiert und alle Attribute erhalten ihre
Defaultwerte (siehe Abschnitt L{+Eigenschaften}).

=== Segmente

In Titel (C{title}), Autor (C{author}) und Datum (C{date}) des
Dokuments können Segmente (siehe Abschnitt L{+Syntax/Segment})
verwendet werden:

  A, B, C, G, I, L, M, N, Q

=== Eigenschaften

[anchor=STRING]:
  Anker des Dokuments.
  
[author=STRING]:
  Der Autor des Dokuments. Wenn gesetzt, wird eine Titelseite bzw.
  ein Titelabschnitt erzeugt.

[codeStyle=STYLE]:
    (Default: 'default') Der Style, in dem das Syntax-Highlighting von
    Code-Blöcken erfolgt, wenn das Attribut C{lang} gesetzt ist. Die
    Liste der verfügbaren Styles liefert das Kommando

        $ pygmentize -L styles

[copyComments=BOOL]:
  (Default: 1) Kopiere Sdoc-Kommentare in den Quelltext des
  Zielformats. Dies ist z.B. nützlich, um eine Stelle im Quelltext des
  Zielformats zu finden, die aus einem bestimmten Sdoc-Konstrukt
  hervorgegangen ist.

[cssClassPrefix=NAME]
  (Default: 'sdoc') Präfix für die CSS-Klassen der Elemente des
  Dokuments.

[date=STRING]:
  Das Datum des Dokuments. Wenn gesetzt, wird eine Titelseite bzw.
  ein Titelabschnitt erzeugt. Formatelemente von strftime werden
  expandiert. Spezielle Werte:

  ['today']:
    Wird unter LaTeX ersetzt zu: C{\today}, sonst C{%d. %B %Y}
  ['now']:
    Wird expandiert zu: C{%Y-%m-%d %H:%M:%S}

  Ist kein Wert angegeben, erscheint kein Datum im Dokumenttitel.

[htmlDocumentStyle=NAME]:
  (Default: default) Der Name des CSS-Stylesheet, das für das Design
  des HTML-Dokuments verwendet wird.

[htmlIndentation=INTEGER]:
  (Default: 20) In HTML die Tiefe der Einrückung für List-, Graphic-,
  Code-, Table-Blöcke vom linken Rand, wenn diese eingerückt werden
  sollen. Das Maß wird einheitenlos in Pixel angegeben.

[indentMode=BOOL]:
  (Default: 0) Wenn gesetzt, werden alle Code-, Graphic-, List- und
  Table-Blöcke, für die nichts anderes angegeben ist, eingerückt
  dargestellt.

[language=LANGUAGE]:
  (Default: german) Die Sprache, in der das Dokument verfasst ist. In
  dieser Sprache werden Dokument-Bezeichnungen wie z.B.
  Q{Inhaltsverzeichnis} erzeugt. Ferner bestimmt die Sprache in LaTeX
  die Trennregeln. Mögliche Werte: german, english.

[latexDocumentClass=NAME]:
  LaTeX-Dokumentklasse. Werte: 'scrartcl', 'scrreprt', 'scrbook',
  'article', 'report', 'book', ...

[latexDocumentOptions=STRING]:
  Kommaseparierte Liste von LaTeX
  Dokumentklassen-Optionen. Z.B. 'twoside'.

[latexFontSize=SIZE]:
  (Default: '10pt') Die Größe des LaTeX-Font. Mögliche Werte: '10pt',
  '11pt', '12pt'.

[latexGeometry=STRING]:
  (Default: 'height=22.5cm,bottom=3.8cm' bei a4paper) Definition der
  Seitengeometrie mittels des LaTeX-Pakets C{geometry}. Damit können
  gegenüber der Grundeinstellung abweichende Seitenmaße definiert
  werden.

[latexIndentation=FLOAT]:
  (Default: 11.5) In LaTeX die Tiefe der Einrückung für Code-,
  Graphic-, List- und Table-Blöcke vom linken Rand, wenn diese
  eingerückt werden sollen. Einheit ist C{pt}, die aber nicht
  angegeben wird.

[latexPageStyle=NAME]:
  Definiere den Seitenstil der Titelseite und der sonstigen Seiten.
  Der Seitenstil legt fest, was im Kopf und im Fuß der Seite erscheint.
  Zur Verfügung stehen die Seitenstil-Bezeichnungen 'empty' (Kopf-
  und Fußzeile leer), 'plain' (nur Fuß mit Seitennummer), 'headings'
  (Kopf mit Abschnittstiteln, Fuß mit Seitennummer). Ist lediglich ein
  Seitenstil angegeben, gilt dieser für alle Seiten. Beispiel:

    latexPageStyle="empty"

  ist identisch zu

    latexPageStyle="empty,empty"

[latexPaperSize=NAME]:
  (Default: 'a4paper') Papiergröße für LaTeX.

[latexParSkip=LENGTH]:
  (Default: '0.5ex') Vertikaler Abstand zwischen Absätzen.

[latexShowFrames=BOOL]:
  (Default: 0) Zeichne den Text-, Kopfzeilen-, Fußzeilen- und
  Kommentarbereich in die Seiten ein. Dies ist eine Debugging-Option.

[quiet=BOOL]:
  (Default: 0) Gib keine Warnungen aus.

[sectionNumberLevel=N]:
  (Default: 3) Die Abschnittsebene, bis zu welcher Abschnitte
  numeriert werden.  Mögliche Werte: -2, -1, 0, 1, 2, 3, 4. -2
  bedeutet: Die Abschnitte des Dokuments werden nicht numeriert.

[smallerMonospacedFont=BOOL]:
  Wähle einen kleineren Monospaced Font als standardmäßig.

[tableOfContents=BOOL]:
  (Default: 1) Erzeuge ein Inhaltsverzeichnis, auch wenn das Dokument
  keinen TableOfContents-Block enthält.

[title=STRING]:
  Der Titel des Dokuments. Wenn gesetzt, wird eine Titelseite bzw.
  ein Titelabschnitt erzeugt.

---PageBreak---

== Inhaltsverzeichnis (TableOfContents)

Das Inhaltsverzeichnis wird an die Stelle plaziert, wo der
TableOfContents-Block steht.

  %TableOfContents:
    maxLevel=N

Der TableOfContents-Block ist optional. Kommt er im Dokument nicht
vor, wird das Inhaltsverzeichnis automatisch nach dem
Dokument-Vorspann eingefügt, wenn die Dokument-Eigenschaft
C{tableOfContents=1} gesetzt ist (siehe Abschnitt
L{+Dokument/Eigenschaften}). Ist C{tableOfContents=0} gesetzt, findet
dies nicht statt und das Dokument erhält kein Inhaltsverzeichnis.

%Link:
  name="Dokument/Eigenschaften"
  regex="Dokument.*/Eigenschaften"

=== Eigenschaften

[maxLevel=N]:
  (Default: 3) Tiefe, bis zu welcher Abschnitte ins Inhaltsverzeichnis
  aufgenommen werden. Mögliche Werte: -2, -1, 0, 1, 2, 3, 4. -2 = kein
  Inhaltsverzeichnis.

---PageBreak---

== Abschnitt (Section)

Ein Abschnitt beginnt mit einem oder mehreren =, gefolgt von
mindestens einem Leerzeichen, gefolgt von dem Abschnittstitel. Die
Zahl der = gibt die Ebene des Abschnitts an. Der Titel endet mit dem
Ende der Zeile. Längere Titel können per Zeilenfortsetzung geschrieben
werden.

  = Dies ist ein Abschnitt der Ebene 1

  == Dies ist ein Abschnitt der Ebene 2

  === Dies ist ein Abschnitt der Ebene 3

Abschnitte werden optional mit 1. 1.1. 1.2. ... 2. 2.1. usw.
durchnummeriert, wenn das %Document-Attribut C{sectionNumberLevel}
auf einen Wert > -2 gesetzt wird.

=== Übergeordnete Ebenen

Den Abschnittsebenen 1 bis 4 sind zwei weitere Ebenen I{übergeordnet},
die für größere Dokumente oder zur Vereinigung mehrerer Dokumente
verwendet werden können. Dies sind die Ebenen

  =- Teil

  ==- Kapitel

In LaTeX stehen diese zur Verfügung, wenn die Dokumentklassen
C{scrreprt}, C{scrbook}, C{report}, C{book} verwendet werden.

=== Appendix

Die Appendizes eines Dokuments beginnen ab dem ersten Abschnitt der
Ebene 1, bei dem auf das = ein Pluszeichen (+) folgt:

  =+ Mit diesem Abschnitt beginnen die Appendizes

Alle folgenden Abschnitte und Unterabschnitte werden als Appendizes
angesehen (unabhängig davon, ob sie mit + ausgezeichnet oder nicht) und
entsprechend mit A. A.1. A.2 ... B. B.1. usw.  numeriert. Sonst gibt
es keinen Unterschied zwischen Abschnitten und Appendizes.

=== Unterabschnitte vom Inhaltsverzeichnis ausschließen

Sollen die I{Unterabschnitte} eines Abschnitts nicht im
Inhaltsverzeichnis erscheinen, wird an die Folge von = des Abschnitts
ein Ausrufungszeichen (!) angehängt. Mit dem Abschnitt endet der
betreffende Teilbaum im Inhaltsverzeichnis. Die unterdrückten
Unterabschnitte müssen nicht gekennzeichnet werden.

  = Abschnitt A (erscheint in Inhaltsverzeichnis)

  ==! Abschnitt AB (erscheint in Inhaltsverzeichnis)

  === Abschnitt ABC (erscheint nicht in Inhaltsverzeichnis)

  ==== Abschnitt ABCD (erscheint nicht in Inhaltsverzeichnis)

Im Unterschied zum %TableOfContents-Attribut C{maxLevel} können auf
diesem Weg Abschnitte unterschiedlicher Ebenen vom Inhaltsverzeichnis
ausgeschlossen werden.

=== Segmente

Im Titel eines Abschnitts können Segmente (siehe Abschnitt
L{+Syntax/Segment}) verwendet werden:

  A{}, B{}, C{}, G{}, I{}, L{}, M{}, N, Q{}

=== Eigenschaften

  %Section:
    anchor=STRING
    isAppendix=BOOL
    level=N
    title=STRING
    tocStop=BOOL

[anchor=STRING]:
  Anker des Abschnitts.
  
[isAppendix=BOOL]:
  Mit diesem Abschnitt beginnen die Appendizes.

[level=N]:
  Tiefe des Abschnitts in der Abschnittshierarchie, beginnend mit 1.

[title=STRING]:
  Titel des Abschnitts.

[tocStop=BOOL]:
  Alle Abschnitte unterhalb dieses Abschnitts werden nicht in das
  Inhaltsverzeichnis aufgenommen.

---PageBreak---

== Zwischenüberschrift (BridgeHead)

Ein Abschnitt wird vom Inhaltsverzeichnis ausgeschlossen und damit
lediglich als Zwischenüberschrift genutzt, wenn an die Folge von = ein
Stern (*) angehängt wird.

  ==* Zwischenüberschrift Stufe 2

  ===* Zwischenüberschrift Stufe 3

  ====* Zwischenüberschrift Stufe 4

produziert:

==* Zwischenüberschrift Stufe 2

===* Zwischenüberschrift Stufe 3

====* Zwischenüberschrift Stufe 4

=== Segmente

In einer Zwischenüberschrift können Segmente (siehe Abschnitt
L{+Syntax/Segment}) verwendet werden:

  A{}, B{}, C{}, G{}, I{}, L{}, M{}, N, Q{}

=== Eigenschaften

  %BridgeHead:
    anchor=STRING
    level=N
    title=STRING

[anchor=STRING]:
  Anker der Zwischenüberschrift.
  
[level=N]:
  Größe der Zwischenüberschrift, beginnend mit 1.

[title=STRING]:
  Titel der Zwischenüberschrift.

---PageBreak---

== Seitenumbruch (PageBreak)

Ein Seitenumbruch wird erzeugt durch eine Zeile mit dem Inhalt

  ---PageBreak---

Dies darf nur der einzige Inhalt der Zeile sein, ohne Leerraum davor
oder dahinter. Ein Seitenumbruch ist nur in der Druck-Fassung von
Bedeutung bzw. wenn die Online-Fassung gedruckt wird.

  Dies ist ein
  Pragraph.

  ---PageBreak---

  Dieser Paragraph beginnt in
  der gedruckten Version des Dokuments
  auf einer neuen Seite.

=== Eigenschaften

  %PageBreak:

Der Seitenumbruch hat keine Eigenschaften.

---PageBreak---

== Paragraph (Paragraph)

Ein Paragraph ist ein Textblock ohne Einrückung, der mit einer
Leerzeile oder mit dem Beginn eines anderen Elements (Liste, Code,
etc.) endet.

  = Dies ist ein Abschnitt

  Dies ist ein Paragraph auf Abschnittsebene,
  der sich in der Quelle über drei
  Zeilen erstreckt.

  * Dies ist ebenfalls ein Paragraph,
    allerdings auf Listenebene.
  * Dies ist der zweite Punkt derselben
    Liste. Noch ein Paragraph.

=== Segmente

In einem Paragraph können Segmente (siehe Abschnitt
L{+Syntax/Segment}) verwendet werden:

  B{}, C{}, G{}, I{}, L{}, M{}, N, Q{}

=== Eigenschaften

  %Paragraph:
  TEXT
  .

Ein Paragraph hat keine Eigenschaften.

---PageBreak---

== Abbildung (Graphic)

Eine Abbildung ist ein freistehendes Bild zwischen zwei Paragraphen
oder anderen Block-Elementen.

Die Größe der Darstellung wird durch die Angabe der Breite (C{width})
und der Höhe (C{height}) festgelegt. Die Werte werden ganzzahlig ohne
Einheit angegeben und von Sdoc in der Einheit I{Pixel} (1/96in)
interpretiert. Für HTML ist dies die natürliche Einheit. Für LaTeX
werden die Werte in die Einheit I{Point} (1/72in) umgerechnet (1px =
0.75pt), so dass die Abbildung in LaTeX in der gleichen Größe
dargestellt wird.

  %Graphic:
    file="+/sdoc-graphic-illusion"
    width=100
    height=100

produziert:

%Graphic:
  file="+/sdoc-graphic-illusion"
  width=100
  height=100

Per Default wird die Abbildung linksseitig mit der Einrückung
C{latexIndentation} bzw. C{htmlIndentation} (siehe Abschnitt
L{+Dokument}) gesetzt. Die Einrückung wird weggelassen wenn das
Attribut C{indent=0} gesetzt ist. Mit C{align=center} kann die
Abbildung auch mittig gesetzt werden.

  %Graphic:
    file="+/sdoc-graphic-illusion"
    width=100
    height=100
    align=center

produziert:

%Graphic:
  file="+/sdoc-graphic-illusion"
  width=100
  height=100
  align=center

Eine Abbildung kann durch Setzen des Attributs C{caption} mit einer
Beschriftung versehen werden. Das Setzen des Attributs C{border}
auf 1, fügt einen Rahmen hinzu.

  %Graphic:
    file="+/sdoc-graphic-illusion"
    caption=Illusion
    width=100
    height=100
    border=1

produziert:

%Graphic:
  file="+/sdoc-graphic-illusion"
  caption=Illusion
  width=100
  height=100
  border=1

Für eine Grafik, die I{im Textfluss} erscheinen soll, siehe Abschnitt
L{+G - Inline-Grafik}.

=== Segmente

In der Beschriftung (C{caption}) einer Abbildung können alle Segmente
(siehe Abschnitt L{+Syntax/Segment}) verwendet werden:

  A, B, C, G, I, L, M, N, Q

=== Eigenschaften

  %Graphic:
    align=left|center|right
    anchor=STRING
    border=BOOL
    caption=STRING
    file=PATH
    height=INTEGER
    latexOptions=STRING
    link=URL
    name=STRING
    indent=BOOL
    padding=LENGTH
    scale=FLOAT
    show=BOOL
    with=INTEGER

[align=left|center|right]:
  (Default: 'left') Horizontale Ausrichtung des Bildes. Mögliche
  Werte: 'left', 'center', 'right'.

[anchor=STRING]:
  Anker der Grafik.

[border=BOOL]:
  (Default: 0) Zeichne einen Rahmen um die Abbildung.

[caption=STRING]:
  Beschriftung der Grafik. Diese erscheint unter der Grafik.

[file=PATH]:
  Pfad der Bilddatei. Beginnt der Pfad mit C{+/}, wird das
  Pluszeichen zum Pfad des Dokumentverzeichnisses expandiert.

[height=INTEGER]:
  Höhe in Pixeln (ohne Angabe einer Einheit), auf die das Bild
  skaliert wird.

[latexOptions=STRING]:
  LaTeX-spezifische Optionen, die direkt an das LaTeX-Makro
  C{\includegraphics} übergeben werden.

[link=URL]:
  Versieh das Bild mit einem Verweis. Dies kann ein Verweis auf ein
  internes oder externes Ziel sein wie bei einem L-Segment (nur dass
  das Attribut den Link-Text als Wert hat ohne den Segment-Bezeichner
  und die geschweiften Klammern).

[name=STRING]:
  Name der Grafik. Ein Name muss angegeben sein, wenn die Grafik von
  einem G-Segment referenziert wird. Ist ein Name gesetzt, ist der
  Default für das Attribut C{definition} 1, sonst 0.

[indent=BOOL]:
  Rücke die Grafik ein. Das Attribut ist nur bei C{align=left}
  und bei Inline-Grafiken von Bedeutung.

[padding=LENGTH]:
  (Default: 0mm) Zeichne den Rahmen (Attribut C{border}) mit dem
  angegebenen Abstand um die Abbildung.

[scale=FLOAT]:
  Skalierungsfaktor. Der Skalierungsfaktor hat bei LaTeX Priorität
  gegenüber der Angabe von C{width} und C{height}.

[show=BOOL]:
  Wenn auf 1 gesetzt, wird die Grafik an Ort und Stelle angezeigt,
  wenn 0, nicht. Sie nicht anzuzeigen macht Sinn, wenn sie lediglich
  von G-Segmenten (Inline Grafik) genutzt werden soll. Der Default für
  das Attribut ist 0, wenn C{useCount > 0} (d.h. die Grafik wird als
  Inline-Grafik genutzt), andernfalls 1.

[width=INTEGER]:
  Breite in Pixeln (ohne Angabe einer Einheit), auf die das Bild
  skaliert wird.

---PageBreak---

== Aufzählung (List)

Es gibt drei verschiedene Arten von Listen.

=== Punktliste

Eine Punktliste (oder I{unordered list}) ist eine Abfolge von Punkten,
deren erste Zeile jeweils mit einem Stern (C{*}) beginnt.

  * Apfel
  * Birne
  * Pflaume

produziert:

* Apfel
* Birne
* Pflaume

=== Numerierungsliste

Eine Numerierungsliste (oder I{ordered list}) ist eine Abfolge von
Punkten, deren erste Zeile jeweils mit einer Zahl gefolgt von einem
Punkt (C{.}) beginnt.

  1. Staub wischen
  2. Wäsche waschen
  3. Essen kochen

produziert:

1. Staub wischen
2. Wäsche waschen
3. Essen kochen

=== Definitionsliste

Eine Definitionsliste (oder I{definition list}) ist eine Abfolge von
Punkten, deren erste Zeile jeweils mit einem Term in eckigen Klammern
gefolgt von einem Doppelpunkt C{[TERM]:} beginnt.

  [255 239 213]:
    PapayaWhip
  [188 143 143]:
    RosyBrown
  [255 218 185]:
    PeachPuff

produziert:

[255 239 213]:
  PapayaWhip
[188 143 143]:
  RosyBrown
[255 218 185]:
  PeachPuff

Im Term der Liste sind Segmente zulässig. Die folgende Definitonsliste
ist nicht schön, zeigt aber alle Möglichkeiten.

    [C{monospace}]:
      Der Term ist C{monospace}.
    [B{fett}]:
      Der Term ist in B{fetter} Schrift.
    [I{kursiv}]:
      Der Term ist in I{kursiver} Schrift. (Kursive Schrift wird unter
      KOMA im Term nicht dargestellt, unter den klassischen
      LaTeX-Dokumentklassen schon)
    [L{http://google.com}]:
      Der Term ist ein Verweis (auf eine Website).
    [M~c=sqrt{a^2+b^2}~]:
      Der Term ist eine mathematische Formel.
    [Q{Zitat}]:
      Der Term ist in Anführungsstriche gesetzt.
    [G{InvaderItem}]:
      Der Term ist eine Grafik.

produziert:

[C{monospace}]:
  Der Term ist C{monospace}.
[B{fett}]:
  Der Term ist in B{fetter} Schrift.
[I{kursiv}]:
  Der Term ist in I{kursiver} Schrift. (Kursive Schrift wird unter
  KOMA im Term nicht dargestellt, unter den klassischen
  LaTeX-Dokumentklassen schon)
[L{http://google.com}]:
  Der Term ist ein Verweis (auf eine Website).
[M~c=sqrt{a^2+b^2}~]:
  Der Term ist eine mathematische Formel.
[Q{Zitat}]:
  Der Term ist in Anführungsstriche gesetzt.
[G{InvaderItem}]:
  Der Term ist eine Grafik.

%Graphic:
  name="InvaderItem"
  file="+/sdoc-graphic-invader"
  scale=0.025
  show=0

=== Verschachtelung von Listen

Listen können beliebig verschachtelt werden:

  * A
    1. B
    2. C
       [D]:
         E
       [F]:
         G
    3. H
  * I
  * J

produziert:

* A
  1. B
  2. C
     [D]:
       E
     [F]:
       G
  3. H
* I
* J

=== Segmente

Im Term einer Definitonsliste können Segmente (siehe Abschnitt
L{+Syntax/Segment}) verwendet werden:

  B{}, C{}, G{}, I{}, L{}, M{}, N, Q{}

=== Eigenschaften

====* List

  %List:
    indent=BOOL
    listType=TYPE

[indent=BOOL]:
  Rücke die Liste ein. Das Attribut ist nur für Aufzählungs- und
  Markierungslisten von Bedeutung.

[listType=TYPE]:
  Art der Liste. Mögliche Werte: 'unordered', 'ordered',,
  'description'.  Wenn nicht gesetzt, wird der Wert vom ersten
  List-Item gesetzt.

====* Item

  %Item:
    key=STRING

[key=STRING]:
  Stern (*) im Falle einer Punktliste. Nummer im Falle einer
  Nummerierungsliste. Zeichenkette im Falle einer Definitionsliste.

---PageBreak---

== Tabelle (Table)

Eine Tabelle wird durch eine ASCII-Darstellung, eingefasst in einen
Table-Block, definiert.

  %Table:
  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
  ABCD    1234    GH
  .

produziert:

%Table:
Links Rechts Zentriert
----- ------ ---------
A          1    AB
AB        12    CD
ABC      123    EF
ABCD    1234    GH
.

=== Definition

Die Definition umfasst den Kopf und den Körper der Tabelle. Der Kopf
enthält die Kolumnen-Titel, der Körper die Kolumnen-Daten. Die beiden
Bereiche werden durch eine Trennzeile aus Bindestrichen (-) und
Leerzeichen ( ) getrennt. Neben der Trennung von Titel und Daten hat
die Trennzeile die wichtige Aufgabe, die Lage und die Breite der
Kolumnen zu definieren.

Obige Tabelle besitzt aufgrund der drei Abschnitte aus Bindestichen

  ----- ------ ---------

drei Kolumnen:

* Die erste Kolumne ist 5 Zeichen breit und reicht von
  Zeichenposition 1 bis 5.
* Die zweite Kolumne ist 6 Zeichen breit und reicht von
  Zeichenposition 7 bis 12.
* Die dritte Kolumne ist 9 Zeichen breit und reicht von
  Zeichenpostion 14 bis 20.

Alle Zeichen außerhalb dieser Bereiche werden I{nicht} beachtet. Dies
gilt sowohl für die Kolumnentitel als auch die Kolumnendaten.

=== Ausrichtung

Aus der Anordnung der Werte in einer Kolumne - sowohl Titel als auch
Daten - ergibt sich, ob die Kolumne links, rechts oder zentriert
ausgerichtet ist. Bei einer links ausgerichteten Kolumne belegen
I{alle} (nichtleeren) Werte die erste Zeichenpositon. Bei einer rechts
ausgerichteten Kolumne belegen I{alle} (nichtleeren) Werte die letzte
Zeichenpositon. Bei einer zentrierten Kolumne sind die Werte weder
eindeutig links noch rechts ausgerichtet.

=== Ohne Titelzeile

Die Titelzeile ist optional. Sie kann auch weggelassen werden. Die
Trennzeile für die Kolumnendefinition ist trotzdem erforderlich.

  %Table:
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
  ABCD    1234    GH
  .

produziert:

%Table:
----- ------ ---------
A          1    AB
AB        12    CD
ABC      123    EF
ABCD    1234    GH
.

=== Mehrzeilige Daten

Sowohl die Kolumnentitel als auch die Kolumnendaten können mehrzeilig
sein. Für die Kolumentitel gilt dies generell. Kommen in der Tabelle
mehrzeilige Kolumnendaten vor, müssen I{alle} Datenzeilen mit einer
Trennzeile voneinander getrennt werden.

%Code:
  %Table:
     Nach  Nach
   Rechts  Links         Zentriert
  -------  ------------  ---------
        1  Dies ist die      A
           erste Zeile

        2  Zweite Zeile      B

        3  Die dritte        C
           Zeile
  .
.

produziert:

%Table:
   Nach  Nach
 Rechts  Links         Zentriert
-------  ------------  ---------
      1  Dies ist die      A
         erste Zeile

      2  Zweite Zeile      B

      3  Die dritte        C
         Zeile
.

Bei Tabellen mit mehrzeiligen Kolumnendaten werden per Default,
d.h. wenn für C{border} nichts anderes definiert ist, zusätzlich die
Kolumnen mit senkrechten Linien getrennt.

Damit die ASCII-Darstellung besser lesbar ist, können die Trennzeilen
zwischen den Datenzeilen auch mit Bindestrichen geschrieben werden:

  %Table:
     Nach  Nach
   Rechts  Links         Zentriert
  -------  ------------  ---------
        1  Dies ist die      A
           erste Zeile
  -------  ------------  ---------
        2  Zweite Zeile      B
  -------  ------------  ---------
        3  Die dritte        C
           Zeile
  .

=== Beschriftung

Ist das Attribut C{caption} gesetzt, wird der Tabelle eine Beschriftung
hinzugefügt.

  %Table:
    caption="Eine Tabelle"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  .

produziert:

%Table:
  caption="Eine Tabelle"

Links Rechts Zentriert
----- ------ ---------
A          1    AB
AB        12    CD
.

In der Beschriftung können die Segmente A, B, C, I, G, M, L, Q
verwendet werden.

=== Titelfarbe

Die Titelfarbe kann mittels des Attributs C{titleColor} gesetzt werden:

  %Table:
    titleColor="#ffd700"
    caption="titleColor=#ffd700"
  
  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  .

produziert:

%Table:
  titleColor="#ffd700"
  caption="titleColor=#ffd700"

Links Rechts Zentriert
----- ------ ---------
A          1    AB
AB        12    CD
.

=== Linien

Mittels des Attributs C{border} kann die Tabelle mit Linien versehen
werden.

====* Beispiele

Keine Linien:

%Table:
  border=0
  caption="border=0"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Linie unter Titelzeile:

%Table:
  border=t
  titleColor=0
  caption="border=t, titleColor=0"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Linie unter Titel und ober- und unterhalb der Tabelle:

%Table:
  border=tH
  caption="border=tH"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Horizontale Linien:

%Table:
  border=hH
  caption="border=hH"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Innere horizontale und vertikale Linien:

%Table:
  border=hv
  caption="border=hv, titleColor=0"
  titleColor=0

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Linie unter Titel und um die Tabelle:

%Table:
  border=tHV
  caption="border=tHV"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Alle horizontalen Linien und vertikale Außenlinien:

%Table:
  border=hHV
  caption="border=hHV"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

Alle Linien:

%Table:
  border=hvHV
  caption="border=hvHV"

  Links Rechts Zentriert
  ----- ------ ---------
  A          1    AB
  AB        12    CD
  ABC      123    EF
.

=== Segmente

In den Zellen der Tabelle - sowohl im Titel als auch in den Daten -,
sowie in der Bildunterschrift (C{caption}) können alle Segmente (siehe
Abschnitt L{+Syntax/Segment}) verwendet werden:

  A, B, C, G, I, L, M, N, Q

Das folgende Beispiel zeigt sämtliche Möglichkeiten.

  %Table:
    caption="Segmente: A{TabelleSegmente} B{fett}, C{mono}, G{InvaderList}, \\
      I{kursiv}, L{http://google.com}, M~c=\sqrt{a^2+b^2}~, Q{Zitat}"

  L{Segmente}
  ---------------------
  B{Dies ist fett}
  C{Dies ist monospace}
  G{InvaderList}
  I{Dies ist kursiv}
  L{http://google.com}
  M~c=\sqrt{a^2+b^2}~
  Q{Dies ist ein Zitat}
  .

  %Graphic:
    name="InvaderList"
    file="+/sdoc-graphic-invader"
    scale=0.03
    show=0

  %Link:
    name="Segmente"
    regex="Syntax/Segment"

produziert:

%Table:
  caption="Segmente: A{TabelleSegmente} B{fett}, C{mono}, G{InvaderList}, \
    I{kursiv}, L{http://google.com}, M~c=\sqrt{a^2+b^2}~, Q{Zitat}"

L{Segmente}
---------------------
B{Dies ist fett}
C{Dies ist monospace}
G{InvaderList}
I{Dies ist kursiv}
L{http://google.com}
M~c=\sqrt{a^2+b^2}~
Q{Dies ist ein Zitat}
.

%Graphic:
  name="InvaderList"
  file="+/sdoc-graphic-invader"
  scale=0.03
  show=0

%Link:
  name="Segmente"
  regex="Syntax/Segment"

=== Eigenschaften

  %Table:
    anchor=STRING
    border=STRING
    caption=STRING
    indent=BOOL
    titleColor=COLOR
  TEXT
  .

[anchor=STRING]:
  Anker der Tabelle.

[border=STRING]:
  (Default: 'hHV') Legt fest, welche Linien in und um die Tabelle
  gezeichnet werden.

  [t]:
    Linie zwischen Titel und Daten.
  [h]:
    Horizontale Linien I{zwischen} den Zeilen. Impliziert t.
  [v]:
    Vertikale Linien I{zwischen} den Spalten.
  [H]:
    Horizontale Linien ober- und unterhalb der Tabelle.
  [V]:
    Vertikale Linien links und rechts von der Tabelle.

[caption=STRING]:
  Die Beschriftung der Tabelle. Diese erscheint unter der Tabelle.

[indent=BOOL]:
  Rücke die Tabelle ein. Das Attribut ist nur bei C{align=left}
  von Bedeutung.

[titleColor=COLOR]:
  (Default: '#e8e8e8') Die Farbe der Titelzeile. Der Wert wird als
  RGB-Wert angegeben.

=== LaTeX Setup

In LaTeX ist die Tabelle als C{longtable} realisiert. Diese setzen
wir, abweichend vom Default-Setup, linksbündig mit einer Einrückung,
so dass sie mit anderen Konstrukten wie L{List}, L{Code}, L{Graphic}
gleichtief eingerückt ist.

---PageBreak---

== Code (Code)

Ein Code-Abschnitt ist ein literaler Textblock, der, abgesehen von
Einrückung, Farbgebung oder Zeilennumerierung, im Zielformat exakt so
wiedergegeben wird wie er in der Quelle steht, einschließlich
Leerzeichen und Zeilenumbrüchen.

Es gibt zwei Möglichkeiten einen literalen Textblock anzugeben.

=== Einrückung mit Leerraum

Erstens entsteht ein Code-Abschnitt durch Einrückung mit ein oder mehr
Leerzeichen am Zeilenanfang. Die Einrückung wird automatisch entfernt.

  open(my $fh, 'ls -l |') or die "open failed ($!)\n";
  while (<$fh>) {
      s/\n/<BR>\n/;
      print;
  }
  close($fh) or die "close failed ($!)\n";

=== In Block-Syntax

Zweitens kann ein Code-Abschnitt als Block definiert werden. Der Block
beginnt mit C{%Code:} und endet mit einem einzelnen Punkt (C{.}) auf
einer eigenen Zeile. Dazwischen ist eine Einrückung mit Leerzeichen
erlaubt, aber nicht vorgeschrieben. Diese wird ebenfalls automatisch
entfernt.

  %Code:
    Dies ist ein
    Code-Block
  .

produziert:

%Code:
  Dies ist ein
  Code-Block
.

=== Syntax-Highlighting

Enthält der Code-Abschnitt den Quelltext einer Programmiersprache,
lässt sich dieser mit Syntax-Highlighting aufwerten. Hierzu wird der
Quelltext in einen Code-Block eingefasst und mit dem Attribut
C{lang=LANGUAGE} versehen. Hierbei ist C{LANGUAGE} der Name der
betreffenden Programmiersprache.

  %Code: lang=Perl
    sub gcd {
        my ($class,$a,$b) = @_;
        return $b == 0? $a: $class->gcd($b,$a%$b);
    }
  .

produziert:

%Code: lang=Perl
  sub gcd {
      my ($class,$a,$b) = @_;
      return $b == 0? $a: $class->gcd($b,$a%$b);
  }
.

=== Zeilennummern

Wird das Attribut C{ln=N} mit C{N > 0} gesetzt, werden die Zeilen
durchnummeriert, beginnend mit Zeilennummer C{N}. Der Abschnitt wird
in dem Fall nicht eingerückt. Die Nummerierung findet auch statt, wenn
kein Syntax-Highlighting aktiviert ist.

  %Code: lang=Perl ln=117
    use DirHandle;

    my $dh = DirHandle->new($dir);
    while (my $entry = $dh->next) {
        say $entry;
    }
    $dh->close;
  .

produziert:

%Code: lang=Perl ln=117
  use DirHandle;

  my $dh = DirHandle->new($dir);
  while (my $entry = $dh->next) {
      say $entry;
  }
  $dh->close;
.

=== Text aus Datei laden

Der Text des Code-Abschnitts wird bei Angabe von C{load=PATH} aus
Datei C{PATH} gelesen. Ist C{PATH} ein relativer Pfad, wird diesem das
Verzeichnis der Dokumentdatei vorangestellt.

  %Code: load="/etc/timezone"

produziert:

%Code: load="/etc/timezone"

=== Text von Programmaufruf

Der Text des Code-Abchnitts wird bei Angabe von C{exec=COMMAND}
vom Kommando C{COMMAND} geliefert und zwar von dessen Ausgabe auf
stdout und stderr. Beginnt COMMAND mit einem Plus (+) wird dem
Kommando der Pfad des Dokumentverzeichnisses vorangestellt.

  %Code: exec="date --date=010101"

produziert:

%Code: exec="date --date=010101"

=== Text filtern

Der Text des Code-Abschnitts kann durch ein externes Programm
gefiltert werden. Dies geschieht bei Angabe der Direktive
C{filter=COMMAND}. Hierbei ist C{COMMAND} ein Kommando, das als
Filter arbeitet, also von stdin liest und nach stdout schreibt.

  %Code: filter="grep -v ^D"
  A Dies
  B ist
  C ein
  D Filter-
  E Test
  .

produziert:

%Code: filter="grep -v ^D"
A Dies
B ist
C ein
D Filter-
E Test
.

=== Text extrahieren

Kommt der Text aus einer Datei oder von einem Programmaufruf, möchte
man u.U. nur einen Teil davon darstellen.

Mit der Direktive C{extract} ist es möglich, den Text auf einen Teil
zu reduzieren. Der Wert der Direktive ist ein Regulärer Ausdruck, der
den gewünschten Teil Q{captured}.

In einem längeren Codeabschnitt kann der interessante Teil zum
Beispiel mit Markern wie "# begin" und "# end" gekennzeichnet sein:

  %Code: extract="# begin\s+(.*)# end"
  #!/usr/bin/env perl

  use strict;
  use warnings;
  use 5.010;

  # begin
  my $max = '-inf';
  for my $n (-100,-50,-10) {
      $max = $n if $n > $max;
  }
  # end
  say $max;
  __END__
  -10
  .

produziert:

%Code: extract="# begin\s+(.*)# end"
#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;

# begin
my $max = '-inf';
for my $n (-100,-50,-10) {
    $max = $n if $n > $max;
}
# end
say $max;
__END__
-10
.

=== Eigenschaften

  %Code:
    exec=COMMAND
    extract=REGEX
    filter=COMMAND
    indent=BOOL
    load=FILE
    lang=LANGUAGE
    ln=N
  TEXT
  .

Im Falle der Direktiven C{exec} und C{load} entfällt der Text-Body
C{TEXT} und der abschließende Punkt.

Die Reihenfolge der Ausführung der Direktiven C{exec}, C{extract},
C{filter} und C{load} - so weit angegeben - ist:

1. C{load} oder C{exec} (nur alternativ möglich)
2. C{filter}
3. C{extract}

% neue Tabelle

[exec=COMMAND]:
  Führe das Kommando C{COMMAND} aus und verwende dessen Ausgabe nach
  stdout und stderr als Text des Code-Blocks. Der Code Block hat in
  diesem Fall keinen Text-Body. Beginnt das Kommando mit C{+/}, wird
  das Pluszeichen zum Pfad des Dokumentverzeichnisses expandiert.

[extract=REGEX]:
  Reduziere den Text auf einen Teil. Der Reguläre Ausdruck $regex
  hat Perl-Mächtigkeit und wird unter den Modifiern C{s} (C{.}
  matcht Zeilenumbrüche) und C{m} (C{^} und C{$} matchen
  Zeilenanfang und -ende) interpretiert. Der Reguläre Ausdruck
  muss einen eingebetteten Klammerausdruck C{(...)} enthalten.
  Dieser Q{captured} den gewünschten Teil.

[filter=COMMAND]:
  Schicke den Text des Code-Blocks an Kommando COMMAND und ersetze
  ihn durch dessen Ausgabe. Das Kommando arbeitet als Filter, liest
  also von stdin und schreibt nach stdout.

[indent=BOOL]:
  (Default: I{kontextabhängig}) Rücke den Text ein. Im Falle von
  Zeilennummern (C{ln=N}) wird I{nicht} eingerückt. Sonst wird
  eingerückt.  Durch explizite Setzung des Attributs kann der
  jeweilige Default überschrieben werden.

[load=FILE]:
  Lade Datei C{FILE} und verwende dessen Inhalt als Text des
  Code-Blocks.  Der Code Block hat in diesem Fall keinen
  Text-Body. Beginnt der Pfad der Datei mit C{+/}, wird das
  Pluszeichen zum Pfad des Dokumentverzeichnisses expandiert.

[lang=LANGUAGE]:
  Der Code ist Quelltext der Sprache LANGUAGE. Mit dieser Option wird
  das Syntax-Highlighting aktiviert. Dies verfügbaren Sprachen
  (Q{Lexer}) liefert das Kommando

      $ pygmentize -L lexers

[ln=N]:
  Setze an den Anfang der Zeilen eine Zeilennummer, wenn C{N > 0}.
  Start-Zeilennummer ist C{N}. Das Attribut C{indent} wird auf den
  Default 0 gesetzt.

---PageBreak---

== Verweis (Link)

Ein Verweis referenziert ein I{internes} oder I{externes} Ziel. Ein
internes Ziel ist eine andere Stelle innerhalb desselben Dokuments.
Auf diese Stelle wird beim Verfolgen des Verweises positioniert. Ein
externes Ziel ist eine lokale Datei oder ein URL. Diese externe
Q{Ressource} wird beim Folgen des Verweises aufgerufen.

Ein Verweis wird in den Text eines Sdoc-Dokuments durch ein L-Segment
C{L\{TEXT\}} gesetzt. Hierbei ist es gleichgültig, ob es sich um einen
internen oder einen externen Verweis handelt. Der Unterschied besteht
in der Art und Weise, wie der Verweis intern aufgelöst wird (siehe unten).

Der Link-Text C{TEXT} wird im Zieldokument als Verweis kenntlich
gemacht und kann in HTML oder PDF angeklickt werden. Der Text kann
auch umbrochen sein, sich also über mehr als eine Zeile
erstrecken. Dies hat auf die Link-Auflösung durch Sdoc keinen
Einfluss, denn der Text wird zunächst in zwei Schritten
I{kanonisiert}:

1. Zeilenumbrüche werden durch Leerzeilen ersetzt.
2. Folgen von zwei und mehr Leerzeichen werden auf I{ein}
   Leerzeichen reduziert.

Für die Ermittelung des Ziels aus dem L-Segment

  ... siehe Abschnitt L{Schachtelung
  von  Segmenten} ...

wird also der kanonisierte Text

  Schachelung von Segmenten

gebildet.

=== Interner Verweis

=== Eigenschaften

  %Link:
    name=STRING
    file=PATH
    regex=REGEX
    url=URL

[name=STRING]:
  Name der Link-Definiton. Mehrere Namen können mit | getrennt
  definiert werden. Beispiel: C{name="Sdoc|Sdoc Homepage"}

[file=PATH]:
  Pfad einer lokalen Datei.

[regex=REGEX]:
  Regex, der den internen Zielknoten identifiziert.

[url=URL]:
  URL eines externen Dokuments.

---PageBreak---

== Datei laden (Include)

Durch einen Include-Block kann der Inhalt einer Datei zum Dokument
hinzugefügt werden. Der geladene Sdoc-Quelltext wird an der Stelle zum
Dokument hinzugefügt, an der der Include-Block steht.

  %Include: load="+/sdoc-test-include.sdoc"

produziert:

%Include: load="+/sdoc-test-include.sdoc"

=== Eigenschaften

  %Include:
    load=PATH

[load=PATH]:
  Lade Datei PATH und füge dessen Inhalt in das Dokument ein. Beginnt
  der Pfad mit C{+/}, wird das Pluszeichen zum Pfad des
  Dokumentverzeichnisses expandiert.

---PageBreak---

== Zitat (Quote)

Ein Abschnitt mit Größerzeichen plus Leerzeichen am
Zeilenanfang wird als Zitat-Block gesetzt

  > Es ist verdammt schwer, einen Menschen zu nehmen,
  > wie er ist, wenn er sich anders gibt, als er ist.
  > (Ernst Ferstl)

produziert:

> Es ist verdammt schwer, einen Menschen zu nehmen,
> wie er ist, wenn er sich anders gibt, als er ist.
> (Ernst Ferstl)

=== Eigenschaften

  %Quote:
  TEXT
  .

Ein Zitat-Block hat keine Eigenschaften.

---PageBreak---

== Kommentar (Comment)

Sdoc unterscheidet zwei Arten von Kommentaren:

1. Kommentare mit einem Hash (#) am Zeilenanfang
2. Kommentare mit einem Prozentzeichen + Leerzeichen (% ) am Zeilenanfang

=== #-Kommentare

Kommentarzeilen, die mit einem Hash (#) beginnen, werden
ignoriert. Sie können in jeder Zeile im Sdoc-Quelltext vorkommen. Sie
sind für Quelltextnotizen nützlich oder zum Auskommentieren von
Sdoc-Code. Beispiel:

  # Dies ist ein Kommentar

=== %-Kommentare

Kommentarzeilen, die mit Prozentzeichen + Leerzeichen (% ) beginnen,
werden als Kommentar-Blöcke in den Syntaxbaum übernommen. Sie sind,
da sie eine eigene syntaktische Einheit bilden, nur I{zwischen}
anderen Blöcken zulässig. Der Kommentar

  % Dies ist ein Kommentar, der in den
  % Quelltext des Zieldokuments übertragen wird

kann äquivalent in Block-Schreibweise geschrieben werden als

  %Comment:
  Dies ist ein Kommentar, der in den
  Quelltext des Zieldokuments übertragen wird
  .

%-Kommentare zeichnen sich dadurch aus, dass sie in den Quelltext
I{des Zieldokuments} übertragen werden, sofern das Zielformat
Kommentare unterstützt. Sie sind für Notizen, die im
Zieldokument-Quelltext erscheinen sollen, oder für Markierungen, die
das Debugging oder eine Weiterverarbeitung des Zieldokuments
vereinfachen, nützlich.

Das Übertragen von %-Kommentaren in den Ziel-Quelltext kann durch die
Dokument-Eigenschaft C{copyComments=BOOL} gesteuert werden. Per
Default ist C{copyComments=1} definiert, d.h. alle %-Kommentare werden
übertragen. Wird C{copyComments=0} gesetzt, findet keine Übertragung
statt.

=== Eigenschaften eines %-Kommentars

  %Comment:
  TEXT
  .

Ein %-Kommentar hat keine Eigenschaften.

---PageBreak---

== Segment

===! A - Anker (anchor)

===! B - Fettschrift (bold)

Der von C{B\{\}} eingefasste Text C{TEXT} wird fett wiedergegeben.

====* Beispiel

  Du machst mich B{sehr} wütend.

Du machst mich B{sehr} wütend.

===! C - Festbreitenschrift (code)

Der von C{C\{\}} eingefasste Text C{TEXT} wird in
Festbreitenschrift wiedergegeben.

====* Beispiel

  Der Konstruktoraufruf C{$class->new()} instantiiert das Objekt.

Der Konstruktoraufruf C{$class->new()} instantiiert das Objekt.

===! G - Inline-Grafik (graphic)

Eine Inline-Grafik, also eine Grafik, die im Textfluss erscheint, wird
durch ein G-Segment C{G\{NAME\}} erzeugt. Hierbei ist NAME der Name
eines Grafik-Blocks (siehe Abschnitt L{+Abbildung}, der die Grafik mit
allen Detailangaben definiert.

Der Grafik-Block kann I{irgendwo} innerhalb des Dokuments stehen:
z.B. nach dem Paragraphen, der das L-Segment enthält, am Ende des
Abschnitts oder am Anfang oder am Ende des Dokuments.

====* Beispiel

  Dies ist eine G{Invader} Inline-Grafik.

  %Graphic:
    name="Invader"
    file="+/sdoc-graphic-invader"
    scale=0.08

produziert:

Dies ist eine G{Invader} Inline-Grafik.

%Graphic:
  name="Invader"
  file="+/sdoc-graphic-invader"
  scale=0.08

===! I - Kursivschrift (italic)

Der von C{I\{\}} eingefasste Text C{TEXT} wird kursiv wiedergegeben.

====* Beispiel

  Ich sagte, du sollst das I{nicht} essen.

Ich sagte, du sollst das I{nicht} essen.

===! L - Verweis (link)

====* Beispiel: Interner Link

  L{Dokument}

L{Dokument}

====* Beispiel: Interner Link mit Abschnitts-, Bild-, Tabellennnummer

  L{+Dokument}

L{+Dokument}

====* Beispiel: Externer Link

  L{http://fseitz.de/}

L{http://fseitz.de/}

====* Beispiel: Link via Link-Definition

  L{Google}

  %Link:
    name="Google"
    url="http://google.com"

L{Google}

%Link:
  name="Google"
  url="http://google.com"

===! M - Mathematische Formel (math)

Der von C{\M~TEXT~} eingefasste Text C{TEXT} wird als mathematische
Formel gesetzt. Da die Formel-Syntax von LaTeX verwendet wird und
diese umfangreichen Gebrauch von geschweiften Klammern macht, ist das
Begrenzungszeichen des Segments C{\M~~} die Tilde (~).

====* Beispiel

  Satz des Pythagoras: M~c=\sqrt{a^2+b^2}~

produziert:

Satz des Pythagoras: M~c=\sqrt{a^2+b^2}~

===! N - Zeilenumbruch (newline)

Die Zeichenkette C{~\N~} forciert einen Zeilenumbruch.

Im Falle von LaTeX ist Vorsicht geboten. An manchen Stellen sind keine
Zeilenumbrüche erlaubt oder, wie z.B. im Dokumenten-Titel, können
nicht mehrere Zeilenumbrüche aufeinander folgen. Fehlermeldung in
diesen Situationen: Q{LaTeX Error: There's no line here to end}).

  Dies ist~N~ein Test.

produziert:

Dies ist~N~ein Test.

===! Q - Anführungszeichen (quote)

Der von C{Q\{\}} eingefasste Text C{TEXT} wird in doppelte
Anführungsstriche gesetzt. Dieses Konstrukt anstelle der doppelten
Anführungsstriche auf der Tastatur (") zu verwenden ist für LaTeX
wichtig, da die doppelten Anführungsstriche dort im Zusammenhang mit
der Spracheinstellung C{ngerman} oder C{german} eine Sonderbedeutung
haben und daher u.U. missinterpretiert werden.

====* Beispiel

  Was heißt schon Q{richtig}?

Was heißt schon Q{richtig}?

=== Allgemeines

Ein Segment kann sich über mehrere Zeilen erstrecken.

====* Segment aufheben

Die Bedeutung eines Segments kann im Text (außerhalb von Segmenten)
aufgehoben werden, indem dem Buchstabe ein Backslash vorangestellt
wird.

  \B{xxx}

\B{xxx}

====* Geschweifte Klammern innerhalb eines Segments

Kommen innerhalb eines Segments geschweifte Klammern vor, müssen diese
mit einem Backslash geschützt werden.

  C{$x->\{'name'\}}

C{$x->\{'name'\}}

Auf diese Weise kann auch die Bedeutung eines Segments innerhalb eines
anderen Segments aufgehoben werden. Das Voranstellen eines Backslash
vor den Segment-Buschstaben ist hier nicht der richtige Weg, da die
geschweiften Klammern geschützt werden müssen.

  C{C\{TEXT\}}

C{C\{TEXT\}}

====* Schachtelung von Segmenten

Segmente können geschachtelt werden.

  B{So geht es I{auch}!}

B{So geht es I{auch}!}

  I{Näheres in Abschnitt L{Dokument}}

I{Näheres in Abschnitt L{Dokument}}

---PageBreak---

== Beispiel in Block-Syntax

Hier das Beispiel aus Abschnitt L{+Beispiel/Sdoc} ohne Wiki-Syntax,
also ausschließlich in Block-Syntax. Der Quelltext wird dadurch
deutlich länger und ist weniger gut lesbar.

%Code: load="+/sdoc-example-block-syntax.sdoc" ln=1

---PageBreak---

= Einrückung von Blöcken

Die Einrückung von Code-, Graphic-, List- und Table-Blöcken vom linken
Dokument-Rand kann individuell oder global eingestellt werden. Die
individuelle Einstellung hat Vorrang gegenüber der globalen
Einstellung.

Die globale Einstellung erfolgt durch das Attribut
C{Document.indentMode=BOOL} (Default: 0), die individuelle durch das
Attribut I{Block}.C{indent=BOOL} (Default: undef).

== Ohne Einrückung

Keine Einrückung findet statt, wenn C{Document.indentMode=0} und
I{Block}.C{indent=undef} oder I{Block}.C{indent=0} eingestellt ist
(Ausnahme siehe Abschnitt L{Sonderfall Listen}).

%List:
  indent=0
* Apfel
* Birne
* Pflaume

%Graphic:
  file="+/sdoc-graphic-illusion"
  width=100
  height=100
  indent=0

%List:
  indent=0
1. Einkaufen
2. Kochen
3. Abwaschen

%Table:
  indent=0

Links Rechts Zentriert
----- ------ ---------
A          1    AB
AB        12    CD
ABC      123    EF
.

%Code: lang=Perl indent=0
  my $dh = DirHandle->new($dir);
  while (my $entry = $dh->next) {
      say $entry;
  }
  $dh->close;
.

%Code: lang=Perl indent=0 ln=118
  my $dh = DirHandle->new($dir);
  while (my $entry = $dh->next) {
      say $entry;
  }
  $dh->close;
.

%List:
  indent=0
[255 239 213]:
  PapayaWhip
[188 143 143]:
  RosyBrown
[255 218 185]:
  PeachPuff

== Mit Einrückung

Eine Einrückung findet statt, wenn C{Document.indentMode=1} und
I{Block}.C{indent=undef} oder I{Block}.C{indent=1} eingestellt ist:

Die Tiefe der Einrückung wird für die Zielformate getrennt
festgelegt. Dies geschieht durch die globalen Dokument-Attribute
I{Format}C{Indentation=FLOAT}. Hierbei ist I{Format} der Bezeichner
für das Zielformat: C{latex} für LaTeX, C{html} für HTML. Der Wert des
jeweiligen Attributs gibt den Abstand vom linken Rand des Dokuments
an. Im Falle von LaTeX wird der Abstand in I{Punkt} (pt) gemessen, im
Falle von HTML in I{Pixel} (px). Es wird der numerische Wert
angegeben, die Einheit ist I{nicht} Bestandteil des Attributwerts.

* Apfel
* Birne
* Pflaume

%Graphic:
  file="+/sdoc-graphic-illusion"
  width=100
  height=100
  indent=1

1. Einkaufen
2. Kochen
3. Abwaschen

%Table:
  indent=1

Links Rechts Zentriert
----- ------ ---------
A          1    AB
AB        12    CD
ABC      123    EF
.

%Code: lang=Perl indent=1
  my $dh = DirHandle->new($dir);
  while (my $entry = $dh->next) {
      say $entry;
  }
  $dh->close;
.

%Code: lang=Perl indent=1 ln=118
  my $dh = DirHandle->new($dir);
  while (my $entry = $dh->next) {
      say $entry;
  }
  $dh->close;
.

[255 239 213]:
  PapayaWhip
[188 143 143]:
  RosyBrown
[255 218 185]:
  PeachPuff

== Sonderfall Listen

Die drei Listenarten - C{unordered}, C{ordered} und C{description} -
stellen einen Sonderfall hinsichtlich der Einrückung dar. Sie werden,
sofern ihr Attribut I{Block}.C{indent} nicht explizit auf den Wert
C{0} gesetzt wird, immer eingerückt, also auch, wenn
C{Document.indentMode=0} gesetzt ist.

===* Unordered

* Apfel
* Birne
* Pflaume

===* Ordered

1. Einkaufen
2. Kochen
3. Abwaschen

===* Description

[255 239 213]:
  PapayaWhip
[188 143 143]:
  RosyBrown
[255 218 185]:
  PeachPuff

---PageBreak---

= Verweise

Ein Verweis (Link) referenziert eine andere Stelle im selben Dokument
(I{interner} Verweis) oder eine Ressource, die sich außerhalb des
Dokuments befindet (I{externer} Verweis).

== Einen Verweis setzen

In Sdoc wird ein Verweis, gleichgültig, ob intern oder extern, durch
ein L-Segment gesetzt:

  ... L{TEXT} ...

Die Punkte stellen hierbei irgendeinen umgebenden Kontext dar. Der
Verweis-Text C{TEXT} ist der Text, der im Zieldokument erscheint und
für den Leser als Verweis kenntlich gemacht wird. Der Text kann auch
umbrochen sein, sich also über mehr als eine Zeile erstrecken:

  ... L{Dies ist ein
  längerer Verweis-Text} ...

Der Text zwischen den geschweiften Klammern eines L-Segments kann
beliebige Zeichen enthalten. Lediglich die Zeichen ({) (öffnende
geschweifte Klammer) und (}) (schließende geschweifte Klammer) müssen
- wie bei allen Segmenten - durch einen Backslash (\) geschützt
werden, sofern sie nicht zu einem eingebetteten Segment gehören.

Der Verweis-Text wird intern vor der Ermittelung des Verweis-Ziels
kanonisiert:

1. Einleitende Verweis-Attribute werden entfernt (siehe Abschnitt
   L{+Verweis-Attribute}).
1. Zeilenumbrüche werden durch Leerzeichen ersetzt.
2. Leerzeichen am Anfang und am Ende werden entfernt.
2. Folgen von zwei und mehr Leerzeichen werden auf I{ein}
   Leerzeichen reduziert.

Beispeil: Der Verweis-Text des L-Segments

  ... siehe Abschnitt L{+Schachtelung
  von  Segmenten} für weitere ...

wird intern kanonisiert zum Verweis-Text

  Schachelung von Segmenten

Das Segment-Attribut C{+} am Anfang wurde entfernt sowie der
Zeilenumbruch und die I{zwei} Leerzeichen zwischen Q{von} und
Q{Segmenten} wurden durch jeweils ein Leerzeichen ersetzt.

== Referenzierbare Objekte

* BridgeHead
* Graphic
* Section
* Table

== Darstellung eines Verweises

  ... <Objekt-Nr> <Verweis-Text> <Seitenangabe> ...
       (otional)     (immer)   (nur Druckfassung)

== Verweis-Attribute

=== +

Wird ein interner Verweis mit einem Pluszeichen (+) eingeleitet,
bedeutet dies, dass der Verweis-Text vom referenzierten Objekt
genommen und ihm die Nummer des Objekts (Abschnitt, Bild, Tabelle)
voran gestellt wird, sofern vorhanden. Der Verweis

  ... siehe Abschnitt L{Einen Verweis setzen} ...

erscheint im Zieldokument als

... siehe Abschnitt L{Einen Verweis setzen} ...

wohingegen der Verweis

  ... siehe Abschnitt L{+Einen Verweis setzen} ...

erscheint als

... siehe Abschnitt L{+Einen Verweis setzen} ...

wobei der Verweis-Text auch abweichen kann, je nachdem, ob der Text
mit dem Text des referenzierten Objekts übereinstimmt (was hier nicht
der Fall ist).

In der Druck-Fassung eines Dokuments folgt auf den Verweis-Text
grundsätzlich die Angabe der Seite, auf der das Verweis-Ziel zu finden
ist. In der Online-Fassung, die nicht seitenbasiert ist, gibt es diese
Seitenangabe natürlich nicht.

---PageBreak---

= Formate

== LaTeX

=== Reservierte Zeichen

In LaTeX gibt es besonders viele reservierte Zeichen. Die folgende
Liste umfasst alle Eingabezeichen, die im Falle von LaTeX oder PDF als
Zielformat von Sdoc gewandelt werden. Sie sollten in einem PDF in den
Spalten Q{ohne WS} und Q{mit WS} korrekt dargestellt werden, einmal
ohne und einmal mit Whitespace nach dem betreffenden Zeichen.

%Table:
  caption="LaTeX Sonderzeichen"
  Zeichen                  LaTeX               ohne WS  mit WS
  -----------------------  ------------------  -------  ------
  Backslash                \textbackslash{}      \x      \ x
  Dach                     \textasciicircum{}    ^x      ^ x
  Dollar                   \$                    $x      $ x
  Geschweifte Klammer auf  \{                    {x      { x
  Geschweifte Klammer zu   \}                    }x      } x
  Größer                   \textgreater{}        >0      > 0
  Kaufmanns-Und            \&                    &x      & x
  Kleiner                  \textless{}           <0      < 0
  Lattenkreuz              \#                    #x      # x
  Pipe                     \textbar{}            |x      | x
  Prozent                  \%                    %x      % x
  Tilde                    \textasciitilde{}     ~x      ~ x
  Unterstrich              \_                    _x      _ x
.

Es werden außerdem folgende Zeichenketten übersetzt:

%Table:
  caption="Speziell behandelte Zeichenketten"
  Zeichenkette             LaTeX               ohne WS    mit WS
  -----------------------  ------------------  --------  ---------
  LaTeX                    \LaTeX{}             LaTeXx    LaTeX x
  TeX                      \TeX{}               TeXx      TeX x
.

=== Paket C{array}

CTAN: L{https://ctan.org/pkg/array}

=== Paket C{babel}

CTAN: L{https://ctan.org/pkg/babel}

=== Paket C{caption}

CTAN: L{https://ctan.org/pkg/caption}

# === Paket C{fancyhdr}
# 
# CTAN: L{https://ctan.org/pkg/fancyhdr}

=== Paket C{float}

CTAN: L{https://ctan.org/pkg/float}

=== Paket C{fontenc}

CTAN: L{https://ctan.org/pkg/fontenc}

=== Paket C{geometry}

CTAN: L{https://ctan.org/pkg/geometry}

=== Paket C{enumitem}

CTAN: L{https://ctan.org/pkg/enumitem}

=== Paket C{graphicx}

CTAN: L{https://ctan.org/pkg/graphicx}

=== Paket C{hyperref}

CTAN: L{https://ctan.org/pkg/hyperref}

=== Paket C{inputenc}

CTAN: L{https://ctan.org/pkg/inputenc}

=== Paket C{lmodern}

Wir verwenden das Paket C{lmodern}, weil es statt der klassischen
C{Computer Modern} Schriften die qualitiv besseren C{Latin Modern}
Schriften auswählt. Dies sind die Schriften der drei Schriftfamilien
Q{roman}, Q{sans-serif} und C{typewriter}.

=== Paket C{longtable}

CTAN: L{https://ctan.org/pkg/longtable}

=== Paket C{makecell}

CTAN: L{https://ctan.org/pkg/makecell}

=== Paket C{microtype}

CTAN: L{https://ctan.org/pkg/microtype}

Wir verwenden das Paket C{microtype}, um den Zeilenumbruch durch
Anwendung von mikrotypografischen Methoden zu verbessern. Hierzu zählt
ein optischer Randausgleich, sowie Wort- und Zeichendehnung.

=== Paket C{minted}

CTAN: L{https://ctan.org/pkg/minted}

# === Paket C{scrbase}
#
# CTAN: L{https://ctan.org/pkg/scrbase}

=== Paket C{quoting}

CTAN: L{https://ctan.org/pkg/quoting}

Wir verwenden das Paket C{quoting} für Zitate, da es eine einfache
Kontrolle über den Font, die Einrückung und den vertikalen Leerraum
über und unter Zitatabschnitten bietet.

=== Paket C{scrlayer-scrpage}

CTAN: L{https://ctan.org/pkg/scrlayer-scrpage}

=== Paket C{showframe}

CTAN: L{https://ctan.org/pkg/showframe}

=== Paket C{varioref}

CTAN: L{https://ctan.org/pkg/varioref}

Wir verwenden das Paket C{varioref}, um Q{schlaue} Seitenverweise zu
erzeugen. In Standard-LaTeX wird ein Seitenverweis mit C{\pageref}
erzeugt. Dieser Seitenverweis beschränkt sich auf die
Seitennummer. Dies wirkt ein wenig absurd, wenn das Verweisziel auf
der gleichen Seite liegt. Wir verwenden als Ersatz das Makro
C{\vpageref} aus dem Paket C{varioref}. Dieses liefert keine
Seitennummer, sondern eine komplette Formulierung wie z.B. Q{auf Seite
45}, abhängig von der Spracheinstellung, die über das Paket C{babel}
für das Dokument vorgenommen wurde. Das Makro erkennt, ob das
Verweisziel auf der gleichen, der vorherigen oder der nächsten Seite
liegt und erzeugt eine entsprechend schlaue Formulierung wie Q{auf
dieser Seite} (siehe Abschnitt L{+Beispiel/PDF} und den zugehörigen
Sdoc-Quelltext in Abschnitt L{+Beispiel/Sdoc}).

=== Paket C{xcolor}

CTAN: L{https://ctan.org/pkg/xcolor}

---PageBreak---

= Sonstiges

== Warnungen

Beim Parsen und Übersetzen eines Sdoc-Dokuments können folgende
Warnungen auftreten. Diese werden nach stderr geschrieben.

[Appendix flag allowed on toplevel sections only]:
  Ein Unterabschnitt ist mit '+' als Appendix gekennzeichnet worden.
  Nur Hauptabschnitte können als Appendix gekennzeichnet werden.

[Attribute "KEY" does not exist]:
  Es wurde ein Block-Attribut zu setzen versucht, das nicht existiert.

[Can't resolve link uniquely: \L{TEXT}]:
  Ein interner Link konnte nicht eindeutig aufgelöst werden. Zwei oder
  mehr gleichwertige Link-Ziele wurden ermittelt.

[Can't resolve link: \L{TEXT}]:
  Ein interner Link konnte nicht aufgelöst werden. Es wurde kein
  Link-Ziel gefunden.

[Graphic not found: \G{NAME}]:
  Der Grafik-Knoten mit dem Namen C{NAME}, der von einem G-Segment
  referenziert wird, konnte nicht gefunden werden.

[Graphic node not used: name="NAME"]:
  Der Grafik-Knoten mit dem Namen C{NAME}, der als Definition
  deklariert ist, wird von keinem G-Segment genutzt.

[Link node not used: name=Q{ungenutzt}]:
  Es wurde per %Link: ein Link definiert, der nirgendwo innerhalb des
  Dokuments genutzt wird.

[More than one anchor: \A{TEXT}]:
  In einem Block wurde mehr als ein Anker gesetzt. Nur der erste Anker
  innerhalb eines Blocks wird verwendet.

[Node does not allow anchors: \A{TEXT}]:
  In einem Block, der keinen Anker zulässt, wurde ein Anker zu
  setzen versucht.

[Node does not allow formulas: \M~TEXT~]:
  In einem Block, der keine mathematische Formel zulässt, wurde eine
  mathematische Formel zu setzen versucht.

[Node does not allow inline graphics: \G{NAME}]:
  In einem Block, der keine Inline-Grafik (G-Segment) zulässt, wurde
  eine Inline-Grafik zu setzen versucht.

[Node does not allow links: \L{TEXT}]:
  In einem Block, der keine Links zulässt, wurde ein Link zu
  setzen versucht.

== Dieses Dokument übersetzen

Übersetzung nach PDF:

  $ sdoc pdf sdoc-manual.sdoc --output=sdoc-manual.pdf

Vorschau auf das PDF-Dokument:

  $ sdoc pdf sdoc-manual.sdoc --preview

---PageBreak---

= Programmierung

== Einen neuen Knoten-Typ definieren

Um einen neuen Knoten-Typ C{TYPE} zur Sdoc-Sprache hinzuzufügen, gehen
wir in folgenden Schritten vor:

1. Wir erweitern die Methode C{LineProcessor::nextType()} um die
   Erkennung des neuen Knoten-Typs, also die Erkennung seines Markup
   im Sdoc-Quelltext. Besitzt der Knoten-Typ kein eigenes Markup,
   sondern wird er allein in Block-Syntax notiert (wie z.B. der
   L{Dokument-Knoten}), entfällt dieser Schritt.

   %Link:
     name="Dokument-Knoten"
     regex="Syntax/Dokument"

2. Wir tragen eine Instanz des neuen Knoten-Typs in ein Sdoc-Dokument
   ein und versuchen dieses zu parsen mit

     $ sdoc validate DOCUMENT.sdoc

   Der neue Knoten-Typ C{TYPE} sollte zwar erkannt werden, aber die
   Übersetzung sollte gleichwohl fehlschlagen mit der Fehlermeldung:

     Exception:
         SDOC-00002: Unknown node type
     Type:
         <TYPE>
     ...

   Schlägt die Übersetzung I{nicht} fehl, wurde der neue Knoten-Typ
   nicht erkannt. Grund für den Fehler ist, dass noch keine
   Knoten-Klasse für den neuen Typ implementiert wurde. Dies machen
   wir im nächsten Schritt.

3. Wir suchen uns eine ähnliche Knoten-Klasse aus den
   C{Sdoc::Node}-Klassen aus, kopieren sie zur einer neuen Klasse
   C{Sdoc::Node::TYPE} und schreiben diese geeignet um. Indem wir
   die Regressionstestfälle mit anpassen, können wir sicherstellen, dass
   das Parsen und Instantiieren des neuen Knoten-Typs funktioniert.

4. Wir fügen die neue Knoten-Klasse C{Sdoc::Node::TYPE} zur
   Import-Liste der Klasse C{Sdoc::Document} hinzu. Vergessen wir
   dies, erhalten wir im nächsten Schritt weiterhin die Fehlermeldung
   aus Schritt 2.

5. Wir überprüfen, dass bei der Übersetzung in die Zielformate das
   richtige Ergebnis produziert wird. Hierzu übersetzen wir das
   Dokument nacheinander in die einzelnen Zielformate und sehen uns
   das jeweilige Ergebnis an:

     $ sdoc latex --preview DOCUMENT.sdoc
     $ sdoc pdf --preview DOCUMENT.sdoc

   Die Option C{--preview} ist hierbei praktisch, da das Dokument dann
   in dem jeweiligen Format unmittelbar angezeigt wird.

== Einen neuen Segment-Typ definieren
 
Um einen neuen Segment-Typ C{T} zur Sdoc-Sprache hinzuzufügen, gehen
wir in folgenden Schritten vor:

1. Wir erweitern die Methode C{<%Sdoc::LineProcessor>%::parseSegments()}
   um die Vorbehandlung des neuen Segment-Typs, also dessen Erkennung
   und Wandlung in die interne Segment-Repräsentation. Hierzu suchen
   wir den Code eines ähnlichen, bereits existierenden
   Segment-Typs, kopieren diesen und passen ihn an.

2. Wir erweitern die Methode(n) C{<%Sdoc::Node>%::FORMATText()}
   (z.B. expandText()), so dass sie den FORMAT-spezifischen
   Code neuen Segment-Typ erzeugen.

== Knoten-Eigenschaft hinzufügen

Eine Eigenschaft ATTRIBUTE wird zur Knoten-Klasse Sdoc::Node::TYPE
in zwei Schritten hinzugefügt:

1. Wir beschreiben die Eigenschaft in der Klassen-Dokumentation.
2. Wir fügen die Eigenschaft und ihren Defaultwert zum Konstruktor
   hinzu (bei Aufruf des Basisklassen- Konstruktors).

Anschließend kann die Eigenschaft im Sdoc-Quelltext gesetzt werden
mit:

  %TYPE:
    ATTRIBUTE="VALUE"

In den Methoden der Klasse kann die Eigenschaft abgefragt werden mit:

   $val = $node->ATTRIBUTE;

Beispiel: Eigenschaft C{language} der Klasse Sdoc::Node::Document.
